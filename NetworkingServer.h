#pragma once

/*
    Copyright(C) 2024 Tyler Crockett | Macdaddy4sure.com

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissionsand
    limitations under the License.
*/

/*
    Boost Software License - Version 1.0 - August 17th, 2003

    Permission is hereby granted, free of charge, to any person or organization
    obtaining a copy of the software and accompanying documentation covered by
    this license(the "Software") to use, reproduce, display, distribute,
    execute, and transmit the Software, and to prepare derivative works of the
    Software, and to permit third - parties to whom the Software is furnished to
    do so, all subject to the following :

    The copyright notices in the Software and this entire statement, including
    the above license grant, this restriction and the following disclaimer,
    must be included in all copies of the Software, in whole or in part, and
    all derivative works of the Software, unless such copies or derivative
    works are solely in the form of machine - executable object code generated by
    a source language processor.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON - INFRINGEMENT.IN NO EVENT
    SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
    FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
    ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

#include "AugmentedIntelligence.h"

//using namespace std;
//using boost::asio::ip::tcp;
//namespace asio = boost::asio;
//
//class tcp_server
//{
//public:
//    tcp_server(boost::asio::io_context& io_context, short port)
//        : acceptor_(io_context, tcp::endpoint(tcp::v4(), port))
//    {
//        start_accept();
//    }
//
//private:
//    void start_accept()
//    {
//        // Create a socket
//        tcp::socket socket(acceptor_.get_executor().context());
//
//        // Asynchronously accept a connection
//        acceptor_.async_accept(socket, [this, &socket](const boost::system::error_code& error)
//            {
//            handle_accept(socket, error);
//            });
//    }
//
//    void handle_accept(tcp::socket& socket, const boost::system::error_code& error) {
//        if (!error) {
//            std::cout << "Client connected" << std::endl;
//
//            // Read message from the client
//            boost::asio::streambuf buffer;
//            boost::asio::read_until(socket, buffer, "\n");
//            std::string message((std::istreambuf_iterator<char>(&buffer)), std::istreambuf_iterator<char>());
//            std::cout << "Received: " << message << std::endl;
//
//            // Send response to the client
//            std::string response = "Message received\n";
//            boost::asio::write(socket, boost::asio::buffer(response));
//        }
//
//        // Accept another connection
//        start_accept();
//    }
//
//    tcp::acceptor acceptor_;
//};